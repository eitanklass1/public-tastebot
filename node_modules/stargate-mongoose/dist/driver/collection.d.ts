import { default as MongooseCollection } from 'mongoose/lib/collection';
import { DeleteOneOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, FindOneOptions, FindOptions, InsertManyOptions, UpdateManyOptions, UpdateOneOptions } from '../collections/options';
import { JSONAPIDeleteResult } from '../collections/collection';
type NodeCallback<ResultType = any> = (err: Error | null, res: ResultType | null) => unknown;
export declare class Collection extends MongooseCollection {
    debugType: string;
    constructor(name: string, conn: any, options: any);
    get collection(): any;
    /**
  * @deprecated
  */
    count(filter: Record<string, any>): any;
    countDocuments(filter: Record<string, any>): any;
    find(filter: Record<string, any>, options?: FindOptions, callback?: NodeCallback<Record<string, any>[]>): any;
    findOne(filter: Record<string, any>, options?: FindOneOptions): any;
    insertOne(doc: Record<string, any>): any;
    insertMany(documents: Record<string, any>[], options?: InsertManyOptions): any;
    findOneAndUpdate(filter: Record<string, any>, update: Record<string, any>, options?: FindOneAndUpdateOptions): any;
    findOneAndDelete(filter: Record<string, any>, options?: FindOneAndDeleteOptions): any;
    findOneAndReplace(filter: Record<string, any>, newDoc: Record<string, any>, options?: FindOneAndReplaceOptions): any;
    deleteMany(filter: Record<string, any>): any;
    deleteOne(filter: Record<string, any>, options?: DeleteOneOptions, callback?: NodeCallback<JSONAPIDeleteResult>): any;
    updateOne(filter: Record<string, any>, update: Record<string, any>, options?: UpdateOneOptions): any;
    updateMany(filter: Record<string, any>, update: Record<string, any>, options?: UpdateManyOptions): any;
    bulkWrite(_ops: any[], _options?: any): void;
    aggregate(_pipeline: any[], _options?: any): void;
    bulkSave(_docs: any[], _options?: any): void;
    cleanIndexes(_options?: any): void;
    listIndexes(_options?: any): void;
    createIndex(_fieldOrSpec: any, _options?: any): void;
    dropIndexes(): void;
    watch(): void;
    distinct(): void;
    estimatedDocumentCount(): void;
    replaceOne(): void;
    syncIndexes(): void;
}
export declare class OperationNotSupportedError extends Error {
    constructor(message: string);
}
export {};
