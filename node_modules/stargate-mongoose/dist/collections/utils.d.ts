import { HTTPClient } from '../client/httpClient';
interface ParsedUri {
    baseUrl: string;
    baseApiPath: string;
    keyspaceName: string;
    applicationToken: string;
    logLevel: string;
    authHeaderName: string;
}
/**
 * Parse a connection URI
 * @param uri - a uri in the format of: https://${baseUrl}/${baseAPIPath}/${keyspace}?applicationToken=${applicationToken}
 * @returns ParsedUri
 */
export declare const parseUri: (uri: string) => ParsedUri;
/**
 * Create a Astra connection URI
 * @param databaseId the database id of the Astra database
 * @param region the region of the Astra database
 * @param keyspace the keyspace to connect to
 * @param applicationToken an Astra application token
 * @param baseApiPath baseAPI path defaults to /api/json/v1
 * @param logLevel an winston log level
 * @param authHeaderName
 * @returns URL as string
 */
export declare const createAstraUri: (databaseId: string, region: string, keyspace: string, applicationToken?: string, baseApiPath?: string, logLevel?: string, authHeaderName?: string) => string;
/**
 * Create a stargate  connection URI
 * @param baseUrl
 * @param baseAuthUrl
 * @param keyspace
 * @param username
 * @param password
 * @param logLevel
* @returns URL as string
 */
export declare const createStargateUri: (baseUrl: string, baseAuthUrl: string, keyspace: string, username: string, password: string, logLevel?: string) => Promise<string>;
/**
 *
 * @param authUrl
 * @param username
 * @param password
 */
export declare function getStargateAccessToken(authUrl: string, username: string, password: string): Promise<any>;
export declare class StargateAuthError extends Error {
    message: string;
    constructor(message: string);
}
/**
 * executeOperation handles running functions
 * return a promise.
 * @param operation a function that takes no parameters and returns a response
 * @returns Promise
 */
export declare const executeOperation: (operation: () => Promise<unknown>) => Promise<any>;
export declare function createNamespace(httpClient: HTTPClient, name: string): Promise<import("../client/httpClient").APIResponse>;
export declare function dropNamespace(httpClient: HTTPClient, name: string): Promise<import("../client/httpClient").APIResponse>;
export declare function setDefaultIdForUpsert(command: Record<string, any>, replace?: boolean): void;
export {};
